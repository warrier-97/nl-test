{"version":3,"sources":["services/StorageService.ts","services/ObjectMapper.ts","domain/models/Story.ts","domain/models/Item.ts","domain/repositories/Repository.ts","components/Card/Card.tsx","components/CardContainer/CardContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StorageKeys","ObjectMapper","instance","jsonConvert","JsonConvert","operationMode","OperationMode","ENABLE","serializeObject","instanceArray","serializeArray","classReference","jsonObject","deserializeObject","jsonArray","deserializeArray","Story","JsonObject","JsonProperty","String","this","_id","_authorName","_headline","_subHeadline","_src","Item","_story","ENDPOINTS","repo","getStories","a","fetch","response","json","jsonResponse","items","Storage","window","localStorage","storageService","secret","get","key","value","getItem","bytes","CryptoJS","AES","decrypt","JSON","parse","toString","enc","Utf8","set","data","encryptedData","encrypt","stringify","setItem","styles","favorite","color","unFavorite","memoizedComponent","memo","story","isFavorite","onFavorite","src","subHeadline","headline","id","Card","Img","variant","Body","Row","Col","xs","Title","className","style","onClick","Text","stories","useState","StorageService","Favourites","favorites","setFavorite","updatedSet","includes","filter","item","Container","map","lg","sm","setStories","useEffect","Repository","then","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9ba1d1fe.chunk.js","sourcesContent":["import { default as CryptoJS } from 'crypto-js';\n\nconst Storage = window.localStorage;\nexport enum StorageKeys {\n  Favourites = '@Favourites',\n}\n\nclass StorageService {\n  private secret: string = 'secret';\n\n  public get = <T>(key: string): T | null => {\n    const value: string | null = Storage.getItem(key);\n    if (!value) {\n      return null;\n    }\n\n    const bytes = CryptoJS.AES.decrypt(value, this.secret);\n    const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData as T;\n  };\n\n  public set = <T>(key: string, data: T): void => {\n    const encryptedData = CryptoJS.AES.encrypt(JSON.stringify(data), this.secret).toString();\n    Storage.setItem(key, encryptedData);\n  };\n}\n\nconst storageService = new StorageService();\nexport { storageService as StorageService };\n","import { JsonObject, JsonProperty, JsonConvert, OperationMode } from 'json2typescript';\n\nclass ObjectMapper {\n  public static serialize<T, J>(instance: T): J {\n    const jsonConvert: JsonConvert = new JsonConvert();\n    jsonConvert.operationMode = OperationMode.ENABLE;\n\n    return jsonConvert.serializeObject<T>(instance);\n  }\n\n  public static serializeArray<T, J>(instanceArray: T[]): J[] {\n    const jsonConvert: JsonConvert = new JsonConvert();\n    jsonConvert.operationMode = OperationMode.ENABLE;\n    return jsonConvert.serializeArray<T>(instanceArray);\n  }\n\n  public static deserialize<T>(classReference: new () => T, jsonObject: any): T {\n    const jsonConvert: JsonConvert = new JsonConvert();\n    jsonConvert.operationMode = OperationMode.ENABLE;\n\n    return jsonConvert.deserializeObject(jsonObject, classReference);\n  }\n\n  public static deserializeArray<T>(classReference: new () => T, jsonArray: any[]): T[] {\n    const jsonConvert: JsonConvert = new JsonConvert();\n    jsonConvert.operationMode = OperationMode.ENABLE;\n    return jsonConvert.deserializeArray<T>(jsonArray, classReference);\n  }\n}\n\nexport { JsonObject, JsonProperty, ObjectMapper };\n","import { JsonObject, JsonProperty } from 'services/ObjectMapper';\n\nconst IMAGE_SRC_PREFIX = 'https://gumlet.assettype.com/';\n\n@JsonObject('Story')\nexport class Story {\n  @JsonProperty('author-name', String)\n  private _authorName = '';\n\n  @JsonProperty('headline', String)\n  private _headline = '';\n\n  @JsonProperty('subheadline', String)\n  private _subHeadline = '';\n\n  @JsonProperty('id', String)\n  private _id = '';\n\n  @JsonProperty('hero-image-s3-key', String)\n  private _src = '';\n\n  get id(): string {\n    return this._id;\n  }\n\n  get authorName(): string {\n    return this._authorName;\n  }\n\n  get headline(): string {\n    return this._headline;\n  }\n\n  get subHeadline(): string {\n    return this._subHeadline;\n  }\n\n  get src(): string {\n    return `${IMAGE_SRC_PREFIX}${this._src}`;\n  }\n}\n","import { JsonObject, JsonProperty } from 'services/ObjectMapper';\nimport { Story } from 'domain/models/Story';\n\n@JsonObject('Item')\nexport class Item {\n  @JsonProperty('id', String)\n  private _id = '';\n\n  @JsonProperty('story', Story)\n  private _story = new Story();\n\n  get id(): string {\n    return this._id;\n  }\n\n  get story(): Story {\n    return this._story;\n  }\n}\n","import { ObjectMapper } from 'services/ObjectMapper';\nimport { Item } from 'domain/models/Item';\n\nconst ENDPOINTS = {\n  getStories: 'https://nl-static-site-assets.s3.ap-south-1.amazonaws.com/reports.json',\n};\n\nclass Repository {\n  public getStories = async (): Promise<any> => {\n    let response = await fetch(ENDPOINTS.getStories);\n    const jsonResponse = await response.json();\n    return ObjectMapper.deserializeArray(Item, jsonResponse.items);\n  };\n}\n\nconst repo = new Repository();\nexport { repo as Repository };\n","import React, { memo } from 'react';\nimport { Card, Col, Row } from 'react-bootstrap';\nimport { Story } from 'domain/models/Story';\nimport 'components/Card/Card.scss';\n\ninterface IProps {\n  story: Story;\n  isFavorite: boolean;\n  onFavorite: (id: string) => void;\n}\n\nconst StoryCard = ({ story, isFavorite, onFavorite }: IProps): React.ReactElement => {\n  const { src, subHeadline, headline, id } = story;\n\n  const onClick = (): void => {\n    onFavorite(id);\n  };\n\n  return (\n    <Card>\n      <Card.Img variant=\"top\" src={src} />\n      <Card.Body>\n        <Row>\n          <Col xs={10}>\n            <Card.Title className=\"headline\">{headline}</Card.Title>\n          </Col>\n          <Col xs={2}>\n            <span style={isFavorite ? styles.favorite : styles.unFavorite} onClick={onClick}>\n              <i className=\"fa fa-heart\" />\n            </span>\n          </Col>\n        </Row>\n        <Card.Text>{subHeadline}</Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst styles = {\n  favorite: {\n    color: 'tomato',\n  },\n  unFavorite: {\n    color: 'black',\n  },\n};\n\nconst memoizedComponent = memo(StoryCard);\nexport { memoizedComponent as StoryCard };\n","import React, { memo, useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { StorageKeys, StorageService } from 'services/StorageService';\nimport { StoryCard } from 'components/Card/Card';\nimport { Item } from 'domain/models/Item';\nimport 'components/CardContainer/CardContainer.scss';\n\ninterface IProps {\n  stories: Item[];\n}\n\nconst CardContainer = ({ stories }: IProps): React.ReactElement => {\n  const [favorites, setFavorite] = useState<string[]>(StorageService.get<string[]>(StorageKeys.Favourites) ?? []);\n\n  const onFavorite = (id: string): void => {\n    let updatedSet = [...favorites, id];\n\n    if(favorites.includes(id)) {\n      updatedSet = favorites.filter((item) => item !== id);\n      setFavorite(updatedSet)\n    }\n\n    setFavorite([...favorites, id]);\n    StorageService.set<string[]>(StorageKeys.Favourites, updatedSet);\n  };\n\n  return (\n    <Container className=\"container\">\n      <Row>\n        {stories.map(\n          (item: Item): React.ReactNode => {\n            const {\n              story: { id },\n            } = item;\n\n            return (\n              <Col lg={3} xs={12} sm={6} className=\"row-container\" key={id}>\n                <StoryCard story={item.story} isFavorite={favorites.includes(id)} onFavorite={onFavorite} />\n              </Col>\n            );\n          }\n        )}\n      </Row>\n    </Container>\n  );\n};\n\nconst memoizedComponent = memo(CardContainer);\nexport { memoizedComponent as CardContainer };\n","import React, { useEffect, useState, memo } from 'react';\nimport { Repository } from 'domain/repositories/Repository';\nimport { CardContainer } from 'components/CardContainer/CardContainer';\nimport { Item } from 'domain/models/Item';\n\nconst App = (): React.ReactElement => {\n  const [stories, setStories] = useState<Item[]>([]);\n\n  useEffect(() => {\n    const getStories = async (): Promise<void> => {\n      const stories = await Repository.getStories();\n      setStories(stories);\n    };\n\n    getStories().then();\n  }, []);\n\n  return <CardContainer stories={stories} />;\n};\n\nconst memoizedComponent = memo(App);\nexport { memoizedComponent as App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}